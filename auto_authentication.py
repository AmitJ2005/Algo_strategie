import requests as rq
from time import sleep
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
import urllib.parse as urlparse
from dotenv import load_dotenv, set_key
import os

from pyotp import TOTP

# Load environment variables from the .env file
load_dotenv()
dotenv_path = '.env'

# Retrieve credentials from the environment variables
client_id = os.getenv("CLIENT_ID")
client_secret = os.getenv("CLIENT_SECRET")
redirect_uri = os.getenv("REDIRECT_URI")
totp_key = os.getenv("TOTP_KEY", "YOUR_TOTP_KEY")
mobile_no = os.getenv("MOBILE_NO", "YOUR_MOBILE_NUMBER")
pin = os.getenv("PIN", "YOUR_PIN")

# Generate authorization URL
auth_url = f'https://api-v2.upstox.com/login/authorization/dialog?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}'

# Set up Selenium driver options
options = webdriver.ChromeOptions()
options.add_argument('--no-sandbox')
# Uncomment this line to run in headless mode (no browser window)
# options.add_argument('--headless')
driver = webdriver.Chrome(options=options)

# Open the authorization URL
driver.get(auth_url)

# Automate the login process using Selenium
wait = WebDriverWait(driver, 10)

# Enter mobile number
wait.until(EC.presence_of_element_located((By.XPATH, '//input[@type="text"]'))).send_keys(mobile_no)
wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="getOtp"]'))).click()

# Enter the TOTP code generated by pyotp
totp = TOTP(totp_key).now()
sleep(2)
wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="otpNum"]'))).send_keys(totp)
wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="continueBtn"]'))).click()

# Enter the PIN
sleep(2)
wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="pinCode"]'))).send_keys(pin)
wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="pinContinueBtn"]'))).click()

# Capture the authorization code from the redirect URL
sleep(2)
token_url = driver.current_url
parsed = urlparse.urlparse(token_url)
driver.close()

# Parse the authorization code
code = urlparse.parse_qs(parsed.query)['code'][0]

# Exchange the authorization code for an access token
url = 'https://api-v2.upstox.com/login/authorization/token'
headers = {
    'accept': 'application/json',
    'Api-Version': '2.0',
    'Content-Type': 'application/x-www-form-urlencoded'
}

data = {
    'code': code,
    'client_id': client_id,
    'client_secret': client_secret,
    'redirect_uri': redirect_uri,
    'grant_type': 'authorization_code'
}

# Make a POST request to get the access token
response = rq.post(url, headers=headers, data=data)
if response.status_code == 200:
    json_response = response.json()
    access_token = json_response.get('access_token', None)

    if access_token:
        print(f"Access Token: {access_token}")

        # Update the ACCESS_TOKEN value in the .env file
        set_key(dotenv_path, "ACCESS_TOKEN", access_token)
        
        print("Access token successfully retrieved and updated in the .env file!")
    else:
        print("Failed to retrieve the access token. Please check your inputs.")
else:
    print(f"Failed to generate access token: {response.status_code} {response.text}")
